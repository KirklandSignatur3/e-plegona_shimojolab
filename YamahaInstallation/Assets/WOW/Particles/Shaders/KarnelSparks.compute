#pragma kernel KernelSparksInit
#pragma kernel KernelSparksUpdate

#include "UnityCG.cginc"
#include "Assets/CjLib/Shader/Noise/RandomNoise.cginc"
#include "Assets/CjLib/Shader/Noise/SimplexNoise3D.cginc"
#include "Assets/CjLib/Shader/Math/Quaternion.cginc"

struct Spark 
{
	float3 velocity;
	float3 position;
	float3 position2;
	float3 scale;
	float3 scale2;
	float4 rotate;
	float4 color;
	float4 color2;
	float4 color3;
	float emission;
	int life;
	int death;
	float unique;
};

RWStructuredBuffer<Spark> particlesBuffer;

uint numParticles;
float4 offsetPos;
float deltaTime;

float random(float2 uv)
{
	return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453123);
}

[numthreads(8, 1, 1)]
void KernelSparksInit(uint id : SV_DispatchThreadID)
{
	particlesBuffer[id].velocity = float3(0.0, 0.0, 0.0);
	particlesBuffer[id].position = float3(0.0, 0.0, -1000.0);
	particlesBuffer[id].scale = float3(0.0, 0.0, 0.0);
	particlesBuffer[id].rotate = quat_identity();
	particlesBuffer[id].life = 0;
}

[numthreads(8,1,1)]
void KernelSparksUpdate(uint id : SV_DispatchThreadID)
{
	if(particlesBuffer[id].life <= 0)
	{
		particlesBuffer[id].velocity = float3(0.0, 0.0, 0.0);
		particlesBuffer[id].position = float3(0.0, 0.0, -1000.0);
		particlesBuffer[id].scale = float3(0.0, 0.0, 0.0);
		particlesBuffer[id].rotate = quat_identity();
	}
	else
	{
		particlesBuffer[id].velocity += (float3(0.0,0.0,0.0)-particlesBuffer[id].velocity)*0.05;
		particlesBuffer[id].position += particlesBuffer[id].velocity;
		particlesBuffer[id].scale += (float3(0.0,0.0,0.0) - particlesBuffer[id].scale)*0.05;
		particlesBuffer[id].rotate = quat_identity();
		particlesBuffer[id].life--;
		particlesBuffer[id].emission = 1;
	}
}